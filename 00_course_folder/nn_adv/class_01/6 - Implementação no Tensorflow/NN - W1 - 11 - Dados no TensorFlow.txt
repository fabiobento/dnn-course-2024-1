Neste vídeo, quero explicar com você como os dados são representados no NumPy e no TensorFlow. Assim, ao implementar novas redes neurais, você pode ter uma estrutura consistente para pensar em como representar seus dados. Uma das coisas lamentáveis sobre a forma como as coisas são feitas no código hoje é que muitos e muitos anos atrás o NumPy foi criado e se tornou uma biblioteca padrão para álgebra linear e Python. E então, muito mais tarde, a equipe cerebral do Google, a equipe que eu havia iniciado e chefiado, criou o TensorFlow. Infelizmente, existem algumas inconsistências entre a forma como os dados são representados no NumPy e no TensorFlow. Portanto, é bom estar ciente dessas convenções para que você possa implementar o código correto e, com sorte, fazer com que as coisas funcionem em suas redes neurais. Vamos começar dando uma olhada em como o TensorFlow representa os dados. Vamos ver se você tem um conjunto de dados como esse do exemplo do café.
Reproduza o vídeo começando em :1:1 e siga a transcrição1:01
Eu mencionei que você escreveria x da seguinte forma. Então, por que você tem esse colchete duplo aqui? Vamos dar uma olhada em como o NumPy armazena vetores e matrizes. Caso você ache que matrizes e vetores são conceitos matemáticos complicados, não se preocupe com isso. Examinaremos alguns exemplos concretos e você poderá fazer tudo o que precisa fazer com matrizes e vetores para implementar suas redes. Vamos começar com um exemplo de matriz. Aqui está uma matriz com 2 linhas e 3 colunas. Observe que há uma, duas linhas e 1, 2, 3 colunas. Então, chamamos isso de matriz 2 x 3. Portanto, a convenção é que a dimensão da matriz é escrita como o número de linhas pelo número de colunas. Então, no código para armazenar essa matriz, essa matriz 2 x 3, basta escrever x = np.array desses números como esses. Onde você percebe que o colchete indica que 1, 2, 3 é a primeira linha dessa matriz e 4, 5, 6 é a segunda linha dessa matriz. E então esse colchete aberto agrupa a primeira e a segunda linha. Então, isso define x como sendo isso para a matriz de números. Portanto, a matriz é apenas uma matriz 2D de números.
Reproduza o vídeo começando em :2:48 e siga a transcrição2:48
Vejamos mais um exemplo, aqui eu escrevi outra matriz. Quantas funções e quantas colunas isso tem? Bem, você pode contar isso como uma, duas, três, quatro linhas e tem uma, duas colunas. Então, essa é uma matriz de número de linhas pelo número de colunas, então é uma matriz 4 x 2. Então, para armazenar isso em código, você escreverá x igual a np.array e, em seguida, essa sintaxe aqui para armazenar essas quatro linhas de matriz na variável x. Então, isso cria uma matriz 2D desses oito números. As matrizes podem ter dimensões diferentes. Você viu um exemplo de uma matriz 2 x 3 e a matriz 4 x 2. Uma matriz também pode ter outras dimensões, como 1 x 2 ou 2 x 1. E veremos exemplos disso no próximo slide. Então, o que fizemos anteriormente ao definir x como vetores de recursos de entrada foi definir x como igual a np.array com dois colchetes, 200, 17. E o que isso faz é criar uma matriz de 1 x 2, que é apenas uma linha e duas colunas. Vejamos um exemplo diferente: se você definisse x como np.array, mas agora escrito assim, isso criaria uma matriz 2 x 1 com duas linhas e uma coluna. Porque a primeira linha é apenas o número 200 e a segunda linha é apenas o número 17. E então isso tem os mesmos números, mas em uma matriz 2 x 1 em vez de 1 x 2. Basta que esse exemplo no topo também seja chamado de vetor de linha, é um vetor que é apenas uma única linha. E esse exemplo também é chamado de vetor de coluna porque esse vetor tem apenas uma única coluna. E a diferença entre usar colchetes duplos como esse versus um único colchete como esse, é que, nos dois exemplos em cima de matrizes 2D, uma das dimensões é 1.
Reproduza o vídeo começando em :5:17 e siga a transcrição5:17
Este exemplo resulta em um vetor 1D. Portanto, esta é apenas uma matriz 1D que não tem linhas ou colunas, embora, por convenção, possamos corrigir x como uma coluna como esta. Então, em contraste com o que havíamos feito anteriormente no primeiro curso, que era escrever x assim com um único colchete. E isso resultou no que é chamado em Python, um vetor 1D em vez de uma matriz 2D. E isso tecnicamente não é 1 x 2 ou 2 x 1, é apenas uma matriz linear sem linhas ou colunas, mas é apenas uma lista de números. Portanto, no primeiro curso, quando trabalhamos com regressão linear e regressão logística , usamos esses vetores 1D para representar os recursos de entrada x. Com o TensorFlow, a convenção é usar matrizes para representar os dados. E por que existem essas convenções de mudança? Bem, acontece que o TensorFlow foi projetado para lidar com conjuntos de dados muito grandes e, ao representar os dados em matrizes em vez de matrizes 1D, permite que o TensorFlow seja um pouco mais eficiente computacionalmente internamente. Então, voltando ao nosso exemplo original para o primeiro treinamento, exemplo neste conjunto de dados com características de 200°C em 17 minutos, fomos representados assim. Então, essa é na verdade uma matriz de 1 x 2 que por acaso tem uma linha e duas colunas para armazenar os números 217.
Reproduza o vídeo começando em :6:57 e siga a transcrição6:57
E caso isso pareça um monte de detalhes e convenções realmente complicadas, não se preocupe, tudo isso ficará mais claro. E você mesmo pode ver as implementações concretas do código nos laboratórios opcionais e nos laboratórios práticos. Voltando ao código para realizar a propagação ou influência na rede neural. Quando você calcula a1 igual à camada 1 aplicada a x, o que é a1? Bem, a1 na verdade será porque os três números, na verdade, serão uma matriz de 1 x 3. E se você imprimir a1, obterá algo assim: tf.tensor 0,2, 0,7, 0,3 como uma forma de 1 x 3, 1, 3 refere-se a que esta é uma matriz de 1 x 3. E essa é a maneira do TensorFlow de dizer que esse é um número de ponto flutuante, o que significa que é um número que pode ter um ponto decimal representado usando 32 bits de memória em seu computador, que é onde está o flutuador 32. E qual é o tensor? Um tensor aqui é um tipo de dados que a equipe do TensorFlow criou para armazenar e realizar cálculos em matrizes de forma eficiente. Então, sempre que você ver um tensor, pense nessa matriz nesses poucos slides. Tecnicamente, um tensor é um pouco mais geral do que a matriz, mas para os propósitos deste curso, pense no tensor apenas como uma forma de representar matrizes. Então, lembre-se de que eu disse no início deste vídeo que existe a maneira TensorFlow de representar a matriz e a maneira NumPy de representar a matriz. Esse é um artefato da história de como o NumPy e o TensorFlow foram criados e, infelizmente, existem duas maneiras de representar uma matriz que foram incorporadas a esses sistemas. E, de fato, se você quiser pegar a1, que é um tensor, e convertê-lo de volta para a matriz NumPy, você pode fazer isso com esta função a1.numpy. E ele pegará os mesmos dados e os retornará na forma de uma matriz NumPy, em vez de na forma de uma matriz TensorFlow ou matriz TensorFlow.
Reproduza o vídeo começando em :9:18 e siga a transcrição9:18
Agora, vamos dar uma olhada na aparência da saída de ativações da segunda camada. Aqui está o código que tínhamos de antes, a camada 2 é uma camada densa com uma unidade e ativação sigmóide e a2 é calculada pegando a camada 2 e aplicando-a a a1, então o que é a2? A2, talvez um número como 0,8 e tecnicamente seja uma matriz 1 x 1, é uma matriz 2D com uma linha e uma coluna e, portanto, é igual a esse número 0,8. E se você imprimir a2, verá que é um tensor TensorFlow com apenas um elemento, um número 0,8 e é uma matriz 1 x 1. E, novamente, é um número de pontos decimais float32 que ocupa 32 bits na memória do computador.
Reproduza o vídeo começando em :10:8 e siga a transcrição10:08
Mais uma vez, você pode converter de um tensor de fluxo tensor em uma matriz NumPy usando a2.numpy e isso o transformará novamente em uma matriz NumPy com a seguinte aparência.
Reproduza o vídeo começando em :10:27 e siga a transcrição10:27
Espero que isso dê uma ideia de como os dados são representados no TensorFlow e no NumPy. Estou acostumado a carregar e manipular dados no NumPy, mas quando você passa uma matriz NumPy para o TensorFlow, o TensorFlow gosta de convertê-la em seu próprio formato interno. O tensor e, em seguida, operam de forma eficiente usando tensores. E ao ler os dados novamente, você pode mantê-los como um tensor ou convertê-los de volta em uma matriz NumPy. Acho um pouco lamentável que a história de como essas bibliotecas evoluíram tenha nos permitido fazer esse trabalho extra de conversão quando, na verdade, as duas bibliotecas podem funcionar muito bem juntas. Mas quando você converte para frente e para trás, seja usando uma matriz NumPy ou um tensor, é apenas algo que você deve considerar ao escrever código. Em seguida, vamos pegar o que aprendemos e juntá-lo para realmente construir uma rede neural. Vamos ver isso no próximo vídeo.
