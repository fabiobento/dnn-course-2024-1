Então, você já viu vários códigos de fluxo tensorial que aprenderam sobre como construir uma camada no fluxo tensorial, como fazer prop direto por meio de uma única camada no fluxo tensorial. E também aprendi sobre dados no TensorFlow. Vamos juntar tudo e falar sobre como criar uma rede neural no TensorFlow. Este também é o último vídeo sobre fluxo de tensores desta semana. E neste vídeo, você também aprende sobre uma maneira diferente de construir uma rede neural, que será ainda um pouco mais simples do que a que você viu até agora. Então, vamos mergulhar no que você viu anteriormente. Se você quiser fazer prop direto, inicialize os dados X crie a camada um, depois calcule uma, depois crie a camada dois e calcule uma segunda. Portanto, essa era uma forma explícita de realizar uma camada de computação avançada na época. Acontece que o fluxo tensorial tem uma maneira diferente de implementar a prop direta e também de aprender. Deixe-me mostrar uma maneira diferente de criar uma rede neural no TensorFlow, que é a mesma de antes de criar a camada um e criar a camada dois. Mas agora, em vez de você pegar manualmente os dados e passá-los para a camada um , depois pegar as ativações da camada um e passá-las para a camada dois. Em vez disso, podemos dizer ao fluxo tensorial que gostaríamos que ele pegasse a camada um e a camada dois e as juntasse para formar uma rede neural. É isso que a função sequencial no TensorFlow faz, ou seja, diz: “Caro TensorFlow, crie uma rede neural para mim juntando sequencialmente essas duas camadas que acabei de criar. Acontece que, com a estrutura sequencial, o fluxo tensorial pode fazer muito trabalho para você. Digamos que você tenha um conjunto de treinamento como esse à esquerda. Isso é para o exemplo do café. Você pode então pegar os dados de treinamento como entradas X e colocá-los em uma matriz numérica. Aqui está uma matriz de quatro por dois e os rótulos de destino. Y pode então ser escrito da seguinte forma. E esta é apenas uma matriz unidimensional de comprimento quatro Y; esse conjunto de alvos pode então ser armazenado como uma matriz 1-D como esta 1001, correspondendo a quatro exemplos de trens. E acontece que, dados os dados X e Y armazenados nessa matriz X e nessa matriz, Y. Se você quiser treinar essa rede neural, tudo o que você precisa fazer é chamar as funções que você precisa chamar o modelo dot compile com alguns parâmetros. Falaremos mais sobre isso na próxima semana, então não se preocupe por enquanto. E então você precisa chamar o modelo dot fit X Y, que diz ao fluxo tensorial que pegue essa rede neural que é criada juntando sequencialmente as camadas um e dois, e treine-a nos dados, X e Y. Mas aprenderemos como, mas aprenderemos os detalhes de como fazer isso na próxima semana e, finalmente, como fazer inferências nessa rede neural? Como você faz prop direto se você tem um novo exemplo, digamos X new, que é uma matriz NP com essas duas características do que realizar uma prop direta em vez de ter que fazer isso sozinho, você só precisa chamar a previsão do modelo em X new e isso produzirá o valor correspondente de dois para você, dado esse valor de entrada de X. Então, o modelo prevê, realiza a propagação direta e carrega uma inferência para você, usando isso rede neural que você compilou usando a função sequencial. Agora, quero colocar essas três linhas de código no topo e simplificá-las um pouco mais, ou seja, ao codificar no Tensorflow. Por convenção, não atribuímos explicitamente as duas camadas a duas variáveis, a camada um e a camada dois, da seguinte forma. Mas, por convenção, eu normalmente escreveria um código como esse, quando dizemos que o modelo é um modelo sequencial de algumas camadas agrupadas. Sequencialmente, onde a primeira camada é uma camada densa com três unidades e ativação do sigmóide e a segunda camada, é uma camada densa com uma unidade e novamente uma função de ativação sigmóide. Portanto, se você observar o código de fluxo tensorial de outros, geralmente verá que ele se parece mais com isso, em vez de ter uma atribuição explícita a essas variáveis da camada um e da camada dois. E então é isso. Esse é basicamente o código que você precisa para treinar e inferir em uma rede neural no TensorFlow. Mais uma vez, falaremos mais sobre as partes de treinamento desses dois, combinando o compilador e a função de ajuste, na próxima semana. Vamos refazer isso também para o exemplo de classificação de dígitos. Então, anteriormente, tínhamos X, nesta camada de entrada, um é uma camada igual a um. Eles querem se aplicar a X e assim por diante por meio da camada dois e da camada três para tentar classificar um dígito. Com essa nova convenção de codificação usando a função sequencial de fluxo tensorial, você pode especificar o que são camada um, camada dois, camada três e dizer ao fluxo tensorial para unir as camadas para você em uma nova rede e a mesma de antes. Em seguida, você pode armazenar os dados na matriz, executar a função de compilação e ajustar o modelo da seguinte maneira. Novamente, falaremos mais sobre isso na próxima semana. Finalmente, para fazer inferências ou fazer previsões, você pode usar a previsão de modelo em X nova e semelhante à que você viu antes com a rede de classificação de café por convenção. Em vez de atribuir camada um, camada dois, camada três, explicitamente assim, é mais comum pegar essas camadas e colocá-las diretamente na função sequencial. Então você acaba com esse código mais compacto que apenas informa o fluxo do tensor, cria um modelo para mim que une sequencialmente essas três camadas e, em seguida, o resto do código funciona da mesma forma que antes. Foi assim que você construiu uma rede neural no TensorFlow. Agora eu sei que quando você está aprendendo sobre essas técnicas, às vezes alguém pode pedir que você implemente essas cinco linhas de código e, em seguida, você digita cinco linhas de código e então alguém diz parabéns com apenas cinco linhas de código. Você construiu essa rede neural louca e complicada de última geração e às vezes isso faz você se perguntar: o que exatamente eu fiz com apenas essas cinco linhas de códigos?
Reproduza o vídeo começando em :7:11 e siga a transcrição7:11
Uma coisa que eu quero que você aprenda com a especialização em aprendizado de máquina é a capacidade de usar bibliotecas de ponta, como o tensor flow, para fazer seu trabalho com eficiência. Mas eu realmente não quero que você chame apenas cinco linhas de código e não saiba realmente o que o código está realmente fazendo por baixo do capô. Então, no próximo vídeo, vou deixar você voltar e compartilhar com você como você pode implementar do zero sozinho. propagação direta em python, para que você possa entender tudo por si mesmo na prática. Na verdade, a maioria dos engenheiros de aprendizado de máquina não implementa a propagação direta em python; geralmente usamos apenas bibliotecas como tensorflow e pytorch, mas porque eu quero que você entenda como esses algoritmos funcionam sozinho, para que, se algo der errado, você possa pensar por si mesmo, o que pode precisar mudar, o que provavelmente funcionará, o que tem menos probabilidade de funcionar. Vamos também ver o que seria necessário para você implementar a propagação do zero. Dessa forma, mesmo quando você está chamando uma biblioteca e fazendo com que ela seja executada de forma eficiente e fazendo grandes coisas em seu aplicativo, quero que você, no fundo da sua mente, também tenha uma compreensão mais profunda do que seu código está realmente fazendo, então vamos para o próximo vídeo.
(Obrigatória)
pt-BR
​


