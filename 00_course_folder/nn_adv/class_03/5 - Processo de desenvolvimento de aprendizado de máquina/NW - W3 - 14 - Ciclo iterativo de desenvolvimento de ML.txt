Nos próximos vídeos, gostaria de compartilhar com vocês o que é passar pelo processo de desenvolvimento de um sistema de aprendizado de máquina para que, ao fazer isso sozinho, você possa tomar ótimas decisões em vários estágios do processo de desenvolvimento do aprendizado de máquina. Vamos dar uma olhada primeiro no ciclo iterativo do desenvolvimento do aprendizado de máquina. É assim que geralmente se sente o desenvolvimento de um modelo de aprendizado de máquina. Primeiro, você decide qual é a arquitetura geral do seu sistema. Isso significa escolher seu modelo de aprendizado de máquina e decidir quais dados usar, talvez escolher os hiperparâmetros e assim por diante. Então, dadas essas decisões, você implementaria e treinaria um modelo. Como mencionei antes, quando você treina um modelo pela primeira vez, ele quase nunca funciona tão bem quanto você deseja. A próxima etapa que eu recomendo, então, é implementar ou analisar alguns diagnósticos, como analisar o viés e a variação do seu algoritmo, bem como algo que veremos no próximo vídeo chamado análise de erros. Com base nos insights do diagnóstico, você pode então tomar decisões como aumentar sua rede neural ou alterar o parâmetro de regularização do Lambda, ou talvez adicionar mais dados ou adicionar mais recursos ou subtrair recursos. Em seguida, você percorre esse ciclo novamente com sua nova opção de arquitetura e, muitas vezes, são necessárias várias iterações nesse loop até que você alcance o desempenho desejado. Vejamos um exemplo de criação de um classificador de spam de e-mail. Acho que muitos de nós odiamos apaixonadamente o spam por e-mail e esse é um problema no qual trabalhei anos atrás e também estive envolvido na criação de uma conferência anti-spam há alguns anos. O exemplo à esquerda é a aparência de um e-mail com alto teor de spam. Oferta da semana, até agora, relógios Rolex. Às vezes, os spammers escrevem deliberadamente incorretamente palavras como essas, relógios, remédios e hipotecas para tentar enganar um reconhecedor de spam. Em contraste, este e-mail à direita é um e-mail real que recebi uma vez do meu irmão mais novo, Alfred, sobre como nos reunirmos para o Natal. Como você cria um classificador para reconhecer e-mails com spam e não spam? Uma maneira de fazer isso seria treinar um algoritmo de aprendizado supervisionado em que os recursos de entrada x serão os recursos de um e-mail e o rótulo de saída y será um ou zero, dependendo se é spam ou não spam. Esse aplicativo é um exemplo de classificação de texto porque você está pegando um documento de texto que é um e-mail e tentando classificá-lo como spam ou não spam. Uma forma de construir os recursos do e-mail seria
Reproduza o vídeo começando em :3:7 e siga a transcrição3:07
usar as 10.000 palavras mais usadas no idioma inglês ou em algum outro dicionário para definir as características x_1, x_2 a x_10.000. Por exemplo, dado este e-mail à direita, se a lista de palavras que temos for uma, Andrew Buy Deal, desconto e assim por diante. Em seguida, dado o e-mail à direita, definiríamos esses recursos como, digamos, 0 ou 1, dependendo se essa palavra aparece ou não. A palavra a não aparece. A palavra Andrew aparece. A palavra comprar aparece, oferta aparece, desconto não, e assim por diante, então você pode criar 10.000 recursos desse e-mail. Há muitas maneiras de construir um vetor de características. Outra forma seria deixar que esses números não fossem apenas 1 ou 0, mas, na verdade, contar o número de vezes que uma determinada palavra aparece no e-mail. Se comprar aparecer duas vezes, talvez você queira definir isso como 2, mas configurando como apenas 1 ou 0. Na verdade, funciona decentemente bem. Com esses recursos, você pode treinar um algoritmo de classificação, como um modelo de regressão logística ou uma rede neural, para prever y, considerando esses recursos x. Depois de treinar seu modelo inicial, se ele não funcionar tão bem quanto você deseja, você provavelmente terá várias ideias para melhorar o desempenho do algoritmo de aprendizado. Por exemplo, é sempre tentador coletar mais dados. Na verdade, tenho amigos que trabalharam em projetos de honeypot de grande escala. Esses são projetos que criam um grande número de endereços de e-mail falsos e tentam deliberadamente colocar esses endereços de e-mail falsos nas mãos de spammers, para que, quando eles enviem e-mails de spam para esses e-mails falsos, saibamos que são mensagens de spam e, portanto, essa é uma maneira de obter muitos dados de spam. Ou você pode decidir trabalhar no desenvolvimento de recursos mais sofisticados com base no roteamento de e-mail. O roteamento de e-mail se refere à sequência do serviço de computação. Às vezes, em todo o mundo, o e-mail passou por todo esse caminho para chegar até você e, na verdade, os e-mails têm o que é chamado de informações de cabeçalho de e-mail. Essas são informações que acompanham como o e-mail percorreu diferentes servidores e redes para chegar até você. Às vezes, o caminho percorrido por um e-mail pode ajudar você a saber se ele foi enviado por um remetente de spam ou não. Ou você pode trabalhar para criar recursos mais sofisticados do corpo do e-mail, que é o texto do e-mail. Nos artigos sobre os quais falei na última vez, desconto e desconto podem ser tratados como palavras diferentes e talvez devam ser tratados como as mesmas palavras. Ou você pode decidir criar algoritmos para detectar erros ortográficos ou erros ortográficos deliberados, como relógios, remédios e hipotecas, e isso também pode ajudá-lo a decidir se um e-mail é spam. Considerando todas essas e possivelmente ainda mais ideias, como você pode decidir em quais dessas ideias são mais promissoras de trabalhar? Porque escolher o caminho mais promissor pode acelerar seu projeto facilmente 10 vezes em comparação com se você escolhesse de alguma forma algumas das direções menos promissoras. Por exemplo, já vimos que, se seu algoritmo tem alto viés em vez de alta variância , passar meses e meses em um projeto de honeypot pode não ser a direção mais proveitosa. Mas se seu algoritmo tem alta variância , coletar mais dados pode ajudar muito. Fazendo o ciclo iterativo de maquinário e desenvolvimento, você pode ter muitas ideias sobre como modificar o modelo ou os dados, e ele apresentará diferentes diagnósticos que podem fornecer muitas orientações sobre quais opções de modelo, dados ou outras partes da arquitetura poderiam ser mais promissoras de experimentar. Nos últimos vídeos, já falamos sobre preconceito e variação. No próximo vídeo, gostaria de começar a descrever para você o processo de análise de erros, que tem um segundo conjunto chave de ideias para obter informações sobre quais opções de arquitetura podem ser frutíferas. Esse é o ciclo iterativo do desenvolvimento do aprendizado de máquina e do uso do exemplo da criação de um classificador de spam. Vamos dar uma olhada na aparência da análise de erros. Vamos fazer isso no próximo vídeo.
