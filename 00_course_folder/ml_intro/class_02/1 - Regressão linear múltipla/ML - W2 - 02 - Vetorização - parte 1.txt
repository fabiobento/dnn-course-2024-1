Neste vídeo, você vê uma ideia muito útil chamada vetorização. Quando você está implementando um algoritmo de aprendizado, o uso da vetorização torna seu código mais curto e também faz com que ele seja executado com muito mais eficiência. Aprender a escrever código vetorizado permitirá que você também aproveite as modernas bibliotecas numéricas de álgebra linear, bem como talvez até mesmo o hardware de GPU que significa unidade de processamento gráfico. Esse é um hardware projetado objetivamente para acelerar a computação gráfica em seu computador, mas pode ser usado quando você escreve código vetorizado para também ajudá-lo a executar seu código com muito mais rapidez. Vejamos um exemplo concreto do que significa vetorização. Aqui está um exemplo com os parâmetros w e b, onde w é um vetor com três números, e você também tem um vetor de características x com também três números. Aqui n é igual a 3. Observe que na álgebra linear, o índice ou a contagem começa em 1 e, portanto, o primeiro valor é subscrito w1 e x1. No código Python, você pode definir essas variáveis w , b e x usando matrizes como essa.
Reproduza o vídeo começando em :1:20 e siga a transcrição1:20
Aqui, na verdade, estou usando uma biblioteca de álgebra linear numérica em Python chamada NumPy, que é de longe a biblioteca de álgebra linear numérica mais usada em Python e no aprendizado de máquina. Como em Python, a indexação de matrizes durante a contagem em matrizes começa em 0, você acessaria o primeiro valor de w usando colchetes w 0. O segundo valor usando um colchete 1 e o terceiro e usando um colchete 2. A indexação aqui vai de 0,1 a 2 em vez de 1, 2 a 3. Da mesma forma, para acessar recursos individuais de x, você usará x0, x1 e x2. Muitas linguagens de programação, incluindo Python, começam a contar a partir de 0 em vez de 1. Agora, vamos analisar uma implementação sem vetorização para calcular a previsão do modelo. Nos códigos, ficará assim. Você pega cada parâmetro w e o multiplica pelo recurso associado. Agora, você poderia escrever seu código assim, mas e se n não for três, mas, em vez disso, n for 100 ou 100.000, é ineficiente para o código e ineficiente para o computador computar. Aqui está outra maneira. Sem usar vetorização, mas usando um loop for. Em matemática, você pode usar um operador de soma para adicionar todos os produtos de w_j e x_j para que j seja igual de 1 a n. Em seguida, citarei a soma que você adiciona b no final. A soma vai de j igual a 1 até n, incluindo n. Para n igual a 3, j, portanto, vai de 1, 2 para 3. No código, você pode inicializar após 0. Então, para j na faixa de 0 a n, isso realmente faz com que j vá de 0 para n menos 1. De 0, 1 a 2, você pode então adicionar a f o produto de w_j vezes x_j. Finalmente, fora do loop for, você adiciona b. Observe que em Python, o intervalo de 0 a n significa que j vai de 0 até n menos 1 e não inclui n em si. Este é um intervalo escrito n em Python. Mas neste vídeo, eu adicionei um 0 aqui apenas para enfatizar que ele começa de 0. Embora essa implementação seja um pouco melhor do que a primeira, ela ainda não usa fatoração e isso não é eficiente? Agora, vamos ver como você pode fazer isso usando a vetorização. Essa é a expressão matemática da função f, que é o produto escalar de w e x mais b, e agora você pode implementá-la com uma única linha de código calculando que fp é igual a np ponto ponto, eu disse ponto ponto porque o primeiro ponto é o período e o segundo ponto é a função ou o método chamado DOT. Mas se fp é igual a np dot dot w vírgula x e isso implementa os produtos matemáticos de pontos entre os vetores w e x. Então, finalmente, você pode adicionar b a ele no final. Essa função de ponto NumPy é uma implementação vetorizada da operação do produto de pontos entre dois vetores e, especialmente quando n é grande, ela é executada muito mais rápido do que os dois exemplos de código anteriores. Quero enfatizar que a vetorização, na verdade, tem dois benefícios distintos. Primeiro, ele torna o código mais curto, agora é apenas uma linha de código. Isso não é legal? Segundo, isso também faz com que seu código seja executado muito mais rápido do que qualquer uma das duas implementações anteriores que não usavam vetorização. A razão pela qual a implementação vetorizada é muito mais rápida está nos bastidores. A função NumPy dot é capaz de usar hardware paralelo em seu computador e isso é verdade se você estiver executando isso em um computador normal, em uma CPU de computador normal ou se estiver usando uma GPU, uma unidade de processador gráfico, que geralmente é usada para acelerar trabalhos de aprendizado de máquina. A capacidade da função NumPy dot de usar hardware paralelo a torna muito mais eficiente do que o loop for ou o cálculo sequencial que vimos anteriormente. Agora, essa versão é muito mais prática quando n é grande porque você não está digitando w0 vezes x0 mais w1 vezes x1 mais muitos termos adicionais, como você teria usado na versão anterior. Mas, embora isso economize muito na digitação, ainda não é tão eficiente computacionalmente porque ainda não usa vetorização. Recapitulando, a vetorização torna seu código mais curto, então espero que seja mais fácil de escrever e mais fácil para você ou outras pessoas lerem, além de fazer com que ele seja executado muito mais rápido. Mas, honestamente, essa mágica por trás da vetorização faz com que isso seja executado muito mais rápido. Vamos dar uma olhada no que seu computador está realmente fazendo nos bastidores para fazer com que o código vetorizado seja executado muito mais rápido.
