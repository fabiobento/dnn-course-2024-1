No laboratório prático, você vê como implementar a filtragem baseada em conteúdo no TensorFlow. O que eu gostaria de fazer neste vídeo é explicar alguns dos principais conceitos do código com os quais você pode jogar. Vamos dar uma olhada. Lembre-se de que nosso código começou com uma rede de usuários e também com um filme que funciona. A maneira como você pode implementar isso no TensorFlow é muito semelhante à forma como implementamos anteriormente uma rede neural com um conjunto de camadas densas. Vamos usar um modelo sequencial. Neste exemplo, temos duas camadas densas com o número de unidades ocultas especificado aqui, e a camada final tem 32 unidades e a saída tem 32 números. Então, para a rede de filmes, vou chamá-la de rede de itens, porque os filmes são os itens aqui, é assim que o código se parece. Mais uma vez, acoplamos camadas ocultas densas, seguidas por essa camada, que gera 32 números. Para as camadas ocultas, usaremos nossa opção padrão de função de ativação, que é a função de ativação relu. Em seguida, precisamos dizer ao TensorFlow Keras como alimentar os recursos do usuário ou os recursos do item, ou seja, os recursos do filme, para as duas redes neurais. Essa é a sintaxe para fazer isso. Isso extrai os recursos de entrada para o usuário e, em seguida, os envia para o usuário e que definimos aqui para calcular vu, o vetor para o usuário. Então, uma etapa adicional que faz com que esse algoritmo funcione um pouco melhor está nesta linha aqui, que normaliza o vetor vu para ter comprimento um. Isso normaliza o comprimento, também chamado de norma l2, mas basicamente o comprimento do vetor vu é igual a um. Em seguida, fazemos a mesma coisa para a rede de itens, para a rede de filmes. Isso extrai os recursos do item e os envia para a rede neural do item que definimos lá em cima. Isso calcula o vetor do filme vm. Então, finalmente, a etapa também normaliza esse vetor para ter comprimento um. Depois de calcular vu e vm, temos que pegar o produto escalar entre esses dois vetores. Essa é a sintaxe para fazer isso. Keras tem um tipo de camada especial, observe que temos aqui tf keras camadas densas, aqui está tf keras layers dot. Acontece que há uma camada especial de Keras, eles apenas pegam um produto pontual entre dois números. Vamos usar isso para pegar o produto pontual entre os vetores vu e vm. Isso fornece a saída da rede neural. Isso dá a previsão final. Finalmente, para dizer ao keras quais são as entradas e saídas do modelo, esta linha informa que o modelo geral é um modelo com entradas sendo os recursos do usuário e o filme ou os recursos do item e a saída, essa é a saída que acabamos de definir acima. A função de custo que usaremos para treinar esse modelo será a função de custo de erro quadrático médio. Esses são os principais trechos de código para implementar a filtragem baseada em conteúdo como uma rede neural. Você vê o resto do código no laboratório prático, mas espero poder brincar com ele e ver como todos esses trechos de código se encaixam na implementação funcional do TensorFlow de um algoritmo de filtragem baseado em conteúdo. Acontece que há outra etapa sobre a qual eu não falei anteriormente, mas se você fizer isso, que é normalizar o comprimento do vetor vu, isso faz com que o algoritmo funcione um pouco melhor. O TensorFlows tem esse movimento normalizado l2 que normaliza o vetor, também chamado de normalização da norma l2 do vetor, daí o nome da função. É isso mesmo. Obrigado por me acompanhar em todo esse material sobre sistemas de recomendação, é uma tecnologia empolgante. Espero que você goste de brincar com essas ideias e códigos nos laboratórios práticos desta semana. Isso nos leva a muitos desses vídeos em sistemas de recomendação e ao final da próxima e última semana dessa especialização. Estou ansioso para ver você na próxima semana também. Falaremos sobre a empolgante tecnologia do aprendizado por reforço. Espero que você se divirta com os questionários e com os laboratórios práticos e espero vê-lo na próxima semana.
