Neste vídeo, começaremos a desenvolver um segundo tipo de sistema de recomendação chamado algoritmo de filtragem baseado em conteúdo. Para começar, vamos comparar e contrastar a abordagem de filtragem colaborativa que analisaremos até agora com essa nova abordagem de filtragem baseada em conteúdo. Vamos dar uma olhada. Com a filtragem colaborativa, a abordagem geral é recomendar itens para você com base nas avaliações de usuários que deram avaliações semelhantes às suas. Alguns usuários dão algumas avaliações para alguns itens, e o algoritmo descobre como usar isso para recomendar novos itens para você. Por outro lado, a filtragem baseada em conteúdo adota uma abordagem diferente para decidir o que recomendar para você. Um algoritmo de filtragem baseado em conteúdo recomendará itens para você com base nos recursos dos usuários e nos recursos dos itens para encontrar uma boa combinação. Em outras palavras, ele requer alguns recursos de cada usuário, bem como alguns recursos de cada item, e usa esses recursos para tentar decidir quais itens e usuários podem ser uma boa combinação entre si. Com um algoritmo de filtragem baseado em conteúdo, você ainda tem dados nos quais os usuários avaliaram alguns itens. Bem, a filtragem baseada em conteúdo continuará a usar r, i, j para indicar se o usuário j classificou ou não o item i e continuará a usar y i, j para indicar a classificação de que o usuário j recebe o item i, se estiver definido. Mas a chave para a filtragem baseada em conteúdo é que seremos capazes de fazer bom uso dos recursos do usuário e dos itens para encontrar melhores correspondências do que uma abordagem de filtragem colaborativa pura poderia fazer. Vamos dar uma olhada em como isso funciona. No caso de recomendações de filmes, aqui estão alguns exemplos de recursos. Você pode saber a idade do usuário ou pode ter o sexo do usuário. Esse pode ser um recurso único semelhante ao que você viu quando falamos sobre árvores de decisão, onde você pode ter um recurso único com os valores baseados no fato de o sexo autoidentificado do usuário ser masculino, feminino ou desconhecido, e você pode saber o país do usuário. Se houver cerca de 200 países no mundo, também seja um recurso único com cerca de 200 valores possíveis. Você também pode analisar os comportamentos anteriores do usuário para construir esse vetor de recursos. Por exemplo, se você observar os mil filmes mais populares do seu catálogo, poderá criar mil recursos que informam sobre os mil filmes mais populares do mundo, quais deles o usuário assiste. Na verdade, você também pode obter avaliações que o usuário já tenha dado para criar novos recursos. Acontece que, se você tem um conjunto de filmes e sabe em que gênero cada filme está, então a classificação média por gênero que o usuário deu. De todos os filmes de romance que o usuário avaliou, qual foi a avaliação média? De todos os filmes de ação que o usuário avaliou, qual foi a avaliação média? E assim por diante para todos os outros gêneros. Isso também pode ser um recurso poderoso para descrever o usuário. Uma coisa interessante sobre esse recurso é que ele realmente depende das avaliações que o usuário deu. Mas não há nada de errado com isso. Construir um vetor de recursos que dependa das avaliações do usuário é uma maneira totalmente boa de desenvolver um vetor de recursos para descrever esse usuário. Com recursos como esses, você pode criar um vetor de recurso x subscrito u, usar como um sobrescrito de usuário j para o usuário j. Da mesma forma, você também pode criar um conjunto de recursos para cada filme de cada item, como qual foi o ano do filme? Qual é o gênero ou gêneros do filme conhecido? Se houver críticas sobre o filme, você pode criar um ou vários recursos para capturar algo sobre o que os críticos estão dizendo sobre o filme. Ou, mais uma vez, você pode realmente usar as avaliações dos usuários sobre o filme para criar uma característica, digamos, da classificação média desse filme. Esse recurso depende novamente das avaliações que os usuários recebem, mas, novamente, não faz nada de errado com isso. Você pode criar um recurso para um determinado filme que dependa das avaliações que o filme recebeu, como a avaliação média do filme. Ou, se desejar, você também pode ter uma classificação média por país ou uma classificação média por usuário demográfico, pois eles também desejam criar outros tipos de recursos dos filmes. Com isso, para cada filme, você pode então construir um vetor de características, que eu vou denotar x subscrito m, m significa filme e sobrescrito i para o filme i. Dadas características como essa, a tarefa é tentar descobrir se um determinado filme i será uma boa combinação para o usuário j. Observe que as características do usuário e as características do filme podem ter tamanhos muito diferentes. Por exemplo, talvez os recursos do usuário possam ter 1500 números e os recursos do filme possam ter apenas 50 números. Tudo bem também. Na filtragem baseada em conteúdo, vamos desenvolver um algoritmo que aprenda a combinar usuários e filmes. Anteriormente, estávamos prevendo a classificação do usuário j no filme i como produtos wj dot de xi mais bj. Para desenvolver a filtragem baseada em conteúdo, vou me livrar do bj. Acontece que isso não prejudicará em nada o desempenho da filtragem baseada em conteúdo. Em vez de escrever wj para um usuário j e xi para um filme i, vou simplesmente substituir essa notação por vj_u. Esse v aqui representa um vetor. Haverá uma lista de números calculados para o usuário j e o subscrito u aqui significa usuário. Em vez de xi, vou calcular um subscrito vetorial separado m, para representar o filme e filme é o que um sobrescrito representa.
Reproduza o vídeo começando em :6:58 e siga a transcrição6:58
Vj_u como vetor como uma lista de números calculados a partir dos recursos do usuário j e vi_m é uma lista de números calculados a partir de recursos como os que você viu no slide anterior do filme i. Se conseguirmos fazer uma escolha apropriada desses vetores, vj_u e vi_m, esperamos que o produto pontual entre esses dois vetores seja uma boa previsão da classificação dada pelo usuário j filme i. Basta ilustrar o que um algoritmo de aprendizado poderia criar. Se v, u, que é um vetor do usuário, acaba capturando as preferências do usuário, digamos que seja 4,9 , 0,1 e assim por diante. Listas de números como esse. O primeiro número mostra o quanto eles gostam de filmes de romance. Em seguida, o segundo número mostra o quanto eles gostam de filmes de ação e assim por diante. Então v_m, o vetor do filme é 4,5, 0,2 e assim por diante, capturando o quanto isso é um filme de romance, o quanto isso é um filme de ação e assim por diante. Em seguida, o produto pontual, que multiplica essas listas de números por elemento e, em seguida, obtém uma soma, esperançosamente, dará uma ideia do quanto esse usuário em particular gostará desse filme em particular.
Reproduza o vídeo começando em :8:28 e siga a transcrição8:28
Os desafios dados às características de um usuário, digamos xj_u, como podemos calcular esse vetor vj_u que representa de forma sucinta ou compacta as preferências do usuário? Da mesma forma, dadas as características de um filme, como podemos calcular vi_m? Observe que, embora x_u e x_m possam ter tamanhos diferentes, uma pode ser uma lista muito longa de números, outra pode ser uma lista muito mais curta, v aqui deve ter o mesmo tamanho. Porque se você quiser pegar um produto pontual entre v_u e v_m , ambos devem ter as mesmas dimensões, talvez ambos sejam, digamos, 32 números. Resumindo, na filtragem colaborativa, tivemos vários usuários avaliando itens diferentes. Por outro lado, na filtragem baseada em conteúdo, temos recursos de usuários e recursos de itens e queremos encontrar uma maneira de encontrar boas correspondências entre os usuários e os itens. A maneira como vamos fazer isso é computar esses vetores, v_u para os usuários e v_m para os itens dos filmes e, em seguida, colocar produtos pontuais entre eles para tentar encontrar boas combinações. Como calculamos o v_u e o v_m? Vamos dar uma olhada nisso no próximo vídeo.
