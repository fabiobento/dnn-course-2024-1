No último vídeo, você viu como se tivesse recursos para cada filme, como os recursos x_1 e x_2 que mostram o quanto isso é um filme de romance e o quanto isso é um filme de ação. Em seguida, você pode usar basicamente a regressão linear para aprender a prever as classificações de filmes. Mas e se você não tiver esses recursos, x_1 e x_2? Vamos dar uma olhada em como você pode aprender ou criar esses recursos x_1 e x_2 a partir dos dados. Aqui estão os dados que tínhamos antes. Mas e se, em vez de ter esses números para x_1 e x_2, não soubéssemos de antemão quais eram os valores das características x_1 e x_2? Vou substituí-los por pontos de interrogação aqui. Agora, apenas para fins de ilustração, digamos que, de alguma forma, já tenhamos aprendido os parâmetros para os quatro usuários. Digamos que aprendemos os parâmetros w^1 é igual a 5 e 0 e b^1 é igual a 0, para o usuário um. W^2 também é 5, 0 b^2, 0. W^3 é 0, 5 b^3 é 0, e para o usuário quatro W^4 também é 0, 5 e b^4 0, 0. Nos preocuparemos mais tarde sobre como poderíamos ter criado esses parâmetros, w e b. Mas digamos que já os temos. Como lembrete, para prever a classificação da música j no filme i, usaremos o produto w^j dot, os recursos de x_i mais b^j. Para simplificar esse exemplo, todos os valores de b são, na verdade, iguais a 0. Só para reduzir um pouco a escrita, vou ignorar b no resto deste exemplo. Vamos dar uma olhada em como podemos tentar adivinhar quais seriam características razoáveis para o primeiro filme. Se esses são os parâmetros que você tem à esquerda , considerando que Alice classificou o filme um, 5, devemos ter que w^1.x^1 deve ser aproximadamente igual a 5 e w^2.x^2 também deve ser aproximadamente igual a 5 porque Bob o classificou como 5. W^3.x^1 deve estar próximo de 0 e w^4.x^1 também deve estar próximo de 0. A questão é, dados esses valores para w que temos aqui, que escolha para x_1 fará com que esses valores estejam corretos?
Reproduza o vídeo começando em :2:46 e siga a transcrição2:46
Bem, uma escolha possível seria se as características desse primeiro filme fossem 1, 0. Nesse caso, w^1.x^1 seria igual a 5, w^2.x^1 seria igual a 5 e, da mesma forma, w^3 ou w^4 pontos do produto com esse vetor de características x_1 seria igual a 0. O que temos é que , se você tiver os parâmetros para todos os quatro usuários aqui e se tiver quatro classificações neste exemplo que deseja tentar igualar, você pode
Reproduza o vídeo começando em :3:25 e siga a transcrição3:25
fazer uma estimativa razoável do que lista um vetor de recurso x_1 para o filme 1 que daria boas previsões para essas quatro classificações no topo. Da mesma forma, se você tiver esses vetores de parâmetros, você também pode tentar criar um vetor de longa-metragem x_2 para o segundo filme, um vetor de longa-metragem x_3 para o terceiro filme e assim por diante para tentar fazer com que as previsões do algoritmo sobre esses filmes adicionais se aproximem do que foram realmente as classificações dadas pelos usuários. Vamos criar uma função de custo para realmente aprender os valores de x_1 e x_2. A propósito, observe que isso funciona apenas porque temos parâmetros para quatro usuários. É isso que nos permite tentar adivinhar os recursos apropriados, x_1. É por isso que em um aplicativo de regressão linear típico, se você tivesse apenas um único usuário, na verdade não tem informações suficientes para descobrir quais seriam os recursos, x_1 e x_2, e é por isso que nos contextos de regressão linear que você viu no curso 1, você não pode criar os recursos x_1 e x_2 do zero. Mas na filtragem colaborativa, é porque você tem avaliações de vários usuários do mesmo item com o mesmo filme. É isso que torna possível tentar adivinhar quais são os valores possíveis para esses recursos.
Reproduza o vídeo começando em :4:52 e siga a transcrição4:52
Dado w^1, b^1, w^2, b^2 e assim por diante por meio de w^n_u e b^n_u, para os usuários n subscritos u. Se você quiser aprender os recursos x^i de um filme específico, i é uma função de custo que poderíamos usar. Vou querer minimizar o erro quadrático, como de costume. Se a classificação prevista pelo usuário j no filme i for dada por isso, vamos pegar a diferença quadrada da classificação real do filme y, i, j. Como antes, vamos somar todos os usuários j. Mas essa será a soma de todos os valores de j, onde r, i, j é igual a I. Vou adicionar 1,5 lá, como de costume. Como eu defini isso como uma função de custo para x^i. Então, se minimizarmos isso em função de x^i, você escolherá os recursos para o filme i. Portanto, todos os usuários J que classificaram o filme i, tentaremos minimizar a diferença quadrada entre o que sua escolha de recursos x^i resulta em termos da classificação prevista do filme menos a classificação real do filme dada pelo usuário.
Reproduza o vídeo começando em :6:20 e siga a transcrição6:20
Finalmente, se quisermos adicionar um termo de regularização, adicionamos o usual mais Lambda sobre 2, K é igual a 1 a n, onde n, como de costume, é o número de características de x^i ao quadrado. Por fim, para aprender todos os recursos de x1 a x^n_m, porque temos n_m filmes, podemos usar essa função de custo em cima e somá-la em todos os filmes. A soma de i é igual a 1 através do número de filmes e, em seguida, basta pegar esse termo acima e isso se torna uma função de custo para aprender os recursos de todos os filmes no conjunto de dados.
Reproduza o vídeo começando em :7:7 e siga a transcrição7:07
Portanto, se você tiver os parâmetros w e b, todos os usuários , minimizar essa função de custo em função de x1 a x^n_m usando gradiente descendente ou algoritmo celular, isso permitirá que você adivinhe bem o aprendizado de bons recursos para os filmes. Isso é bastante notável para a maioria dos aplicativos de aprendizado de máquina. Os recursos precisavam ser fornecidos externamente, mas nesse algoritmo, podemos realmente aprender os recursos de um determinado filme. Mas o que fizemos até agora neste vídeo foi presumir que você tinha esses parâmetros w e b para os diferentes usuários. De onde você obtém esses parâmetros? Bem, vamos montar o algoritmo do último vídeo para aprender w e b e o que acabamos de falar neste vídeo para aprender x, e isso nos dará nosso algoritmo de filtragem colaborativa. Aqui está a função de custo para aprender os recursos. Isso é o que derivamos no último slide. Agora, acontece que se juntarmos esses dois, esse termo aqui é exatamente o mesmo que esse termo aqui. Observe que a soma sobre j de todos os valores de i é que r, i, j é igual a 1 é o mesmo que somar todos os valores de i com todos os j em que r, i, j é igual a 1. Essa soma é apenas a soma de todos os pares de filmes do usuário em que há uma classificação.
Reproduza o vídeo começando em :8:40 e siga a transcrição8:40
O que vou fazer é juntar essas duas funções de custo e escrever a soma mais explicitamente como a soma de todos os pares i e j, onde temos uma classificação da função de custo quadrado usual e, em seguida, deixe-me pegar o termo de regularização do aprendizado dos parâmetros w e b, colocá-lo aqui e pegar o termo de regularização do aprendizado das características x e colocá-los aqui e isso acaba sendo nosso função de custo geral para aprender w, b e x. Acontece que, se você minimizar isso função de custo em função de w e b como y como x, então esse algoritmo realmente funciona. Aqui está o que eu quero dizer. Se tivéssemos três usuários e dois filmes e se você tivesse avaliações para esses quatro filmes, mas não esses dois, aqui tem, é a soma de todos os usuários. Para o usuário 1 determinou a função de custo para isso, para o usuário 2 determinou a função de custo para isso, para o usuário 3 determinou a função de custo para isso. Estamos resumindo os usuários primeiro e depois definindo um termo para cada filme em que há uma classificação. Mas uma forma alternativa de fazer a soma é primeiro ver o filme 1, que é o que essa soma aqui faz, e depois incluir todos os usuários que classificaram o filme 1 e, em seguida, ver o filme 2 e ter um termo para todos os usuários que classificaram o filme 2. Você vê que, em ambos os casos, estamos apenas resumindo essas quatro áreas em que o usuário avaliou o filme correspondente. É por isso que essa soma no topo e essa soma aqui estão as duas maneiras de somar todos os pares em que o usuário avaliou aquele filme. Como você minimiza essa função de custo em função de w, b e x? Uma coisa que você pode fazer é usar o gradiente descendente. No curso 1, quando aprendemos sobre regressão linear, esse é o algoritmo de gradiente descendente que você viu, onde tínhamos a função de custo J, que é uma função dos parâmetros w e b, e aplicaríamos o gradiente descendente da seguinte forma. Com a filtragem colaborativa, a função de custo está em uma função de apenas w e b agora é uma função de w , b e x. Estou usando w e b aqui para indicar os parâmetros para todos os usuários e x aqui apenas informalmente para indicar as características de todos os filmes. Mas se você puder obter derivadas parciais em relação aos diferentes parâmetros, poderá continuar atualizando os parâmetros da seguinte maneira. Mas agora precisamos otimizar isso em relação a x também. Também desejaremos atualizar cada um desses parâmetros x usando gradiente descendente da seguinte forma. Acontece que, se você fizer isso, você realmente encontrará valores muito bons de w e b, bem como de x. Nessa formulação do problema, os parâmetros de w e b e x também são um parâmetro.
Reproduza o vídeo começando em :12:6 e siga a transcrição12:06
Finalmente, para aprender os valores de x, também atualizaremos x como x menos a derivada parcial em relação a x do custo w, b, x. Estou usando a notação aqui um pouco informalmente e não acompanhando muito cuidadosamente os sobrescritos e subscritos, mas a principal conclusão que espero que você tenha aprendido disso é que os parâmetros desse modelo são w e b, e x agora também é um parâmetro, que é por isso que minimizamos a função de custo em função de todos esses três conjuntos de parâmetros, w e b, bem como x. A média que derivamos é chamada de filtragem colaborativa, e o nome filtragem colaborativa se refere à sensação de que, como vários usuários avaliaram o mesmo filme de forma colaborativa, dando uma ideia de como esse filme talvez seja, isso permite que você adivinhe quais são os recursos apropriados para esse filme, o que, por sua vez, permite prever como outros usuários que ainda não avaliaram o mesmo filme podem decidir avaliá-lo no futuro. Essa filtragem colaborativa é a coleta de dados de vários usuários. Essa colaboração entre usuários ajuda você a prever as avaliações até mesmo de outros usuários no futuro. Até agora, nossa formulação de problemas usou classificações de filmes de 1 a 5 estrelas ou de 0 a 5 estrelas. Um caso de uso muito comum dos sistemas recomendados é quando você tem rótulos binários, como os que o usuário prefere , curte ou interage com um item. No próximo vídeo, vamos dar uma olhada em uma generalização do modelo que você viu até agora para rótulos binários. Vamos ver isso no próximo vídeo.
Obrigatória
pt-BR
​

